// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmsi

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// OperationListResultPager provides iteration over OperationListResult pages.
type OperationListResultPager interface {
	azcore.Pager

	// Page returns the current OperationListResultResponse.
	PageResponse() OperationListResultResponse
}

type operationListResultCreateRequest func(context.Context) (*azcore.Request, error)

type operationListResultHandleError func(*azcore.Response) error

type operationListResultHandleResponse func(*azcore.Response) (OperationListResultResponse, error)

type operationListResultAdvancePage func(context.Context, OperationListResultResponse) (*azcore.Request, error)

type operationListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester operationListResultCreateRequest
	// callback for handling response errors
	errorer operationListResultHandleError
	// callback for handling the HTTP response
	responder operationListResultHandleResponse
	// callback for advancing to the next page
	advancer operationListResultAdvancePage
	// contains the current response
	current OperationListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *operationListResultPager) Err() error {
	return p.err
}

func (p *operationListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *operationListResultPager) PageResponse() OperationListResultResponse {
	return p.current
}

// UserAssignedIDentitiesListResultPager provides iteration over UserAssignedIDentitiesListResult pages.
type UserAssignedIDentitiesListResultPager interface {
	azcore.Pager

	// Page returns the current UserAssignedIDentitiesListResultResponse.
	PageResponse() UserAssignedIDentitiesListResultResponse
}

type userAssignedIDentitiesListResultCreateRequest func(context.Context) (*azcore.Request, error)

type userAssignedIDentitiesListResultHandleError func(*azcore.Response) error

type userAssignedIDentitiesListResultHandleResponse func(*azcore.Response) (UserAssignedIDentitiesListResultResponse, error)

type userAssignedIDentitiesListResultAdvancePage func(context.Context, UserAssignedIDentitiesListResultResponse) (*azcore.Request, error)

type userAssignedIDentitiesListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester userAssignedIDentitiesListResultCreateRequest
	// callback for handling response errors
	errorer userAssignedIDentitiesListResultHandleError
	// callback for handling the HTTP response
	responder userAssignedIDentitiesListResultHandleResponse
	// callback for advancing to the next page
	advancer userAssignedIDentitiesListResultAdvancePage
	// contains the current response
	current UserAssignedIDentitiesListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *userAssignedIDentitiesListResultPager) Err() error {
	return p.err
}

func (p *userAssignedIDentitiesListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UserAssignedIDentitiesListResult.NextLink == nil || len(*p.current.UserAssignedIDentitiesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *userAssignedIDentitiesListResultPager) PageResponse() UserAssignedIDentitiesListResultResponse {
	return p.current
}
