// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmsi

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"strings"
)

// SystemAssignedIdentitiesClient contains the methods for the SystemAssignedIdentities group.
// Don't use this type directly, use NewSystemAssignedIdentitiesClient() instead.
type SystemAssignedIdentitiesClient struct {
	con *armcore.Connection
}

// NewSystemAssignedIdentitiesClient creates a new instance of SystemAssignedIdentitiesClient with the specified values.
func NewSystemAssignedIdentitiesClient(con *armcore.Connection) *SystemAssignedIdentitiesClient {
	return &SystemAssignedIdentitiesClient{con: con}
}

// GetByScope - Gets the systemAssignedIdentity available under the specified RP scope.
func (client *SystemAssignedIdentitiesClient) GetByScope(ctx context.Context, scope string, options *SystemAssignedIdentitiesGetByScopeOptions) (SystemAssignedIdentityResponse, error) {
	req, err := client.getByScopeCreateRequest(ctx, scope, options)
	if err != nil {
		return SystemAssignedIdentityResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return SystemAssignedIdentityResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return SystemAssignedIdentityResponse{}, client.getByScopeHandleError(resp)
	}
	return client.getByScopeHandleResponse(resp)
}

// getByScopeCreateRequest creates the GetByScope request.
func (client *SystemAssignedIdentitiesClient) getByScopeCreateRequest(ctx context.Context, scope string, options *SystemAssignedIdentitiesGetByScopeOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.ManagedIdentity/identities/default"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2018-11-30")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getByScopeHandleResponse handles the GetByScope response.
func (client *SystemAssignedIdentitiesClient) getByScopeHandleResponse(resp *azcore.Response) (SystemAssignedIdentityResponse, error) {
	var val *SystemAssignedIdentity
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return SystemAssignedIdentityResponse{}, err
	}
	return SystemAssignedIdentityResponse{RawResponse: resp.Response, SystemAssignedIdentity: val}, nil
}

// getByScopeHandleError handles the GetByScope error response.
func (client *SystemAssignedIdentitiesClient) getByScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
